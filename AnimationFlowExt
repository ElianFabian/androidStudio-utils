import android.animation.ArgbEvaluator
import android.animation.TimeInterpolator
import android.animation.TypeEvaluator
import android.animation.ValueAnimator
import android.view.animation.Interpolator
import android.view.animation.LinearInterpolator
import kotlinx.coroutines.channels.awaitClose
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.callbackFlow
import kotlinx.coroutines.flow.distinctUntilChanged

@JvmName("animateInt")
fun Flow<Int>.animate(
    durationInMillis: (previousValue: Int, currentValue: Int) -> Long = { _, _ -> 500 },
    interpolator: Interpolator = LinearInterpolator(),
): Flow<Int> = callbackFlow {
    var previousValue: Int? = null

    val animator = ValueAnimator().apply {
        this.interpolator = interpolator
    }

    val updateListener = ValueAnimator.AnimatorUpdateListener { animation ->
        trySend(animation.animatedValue as Int)
    }
    animator.addUpdateListener(updateListener)

    collect { newValue ->
        if (animator.isRunning) {
            val currentAnimatedValue = animator.animatedValue as Int
            animator.duration = durationInMillis(currentAnimatedValue, newValue)
            animator.setIntValues(currentAnimatedValue, newValue)
            animator.start()
        }
        else if (previousValue == null) {
            send(newValue)
        }
        else {
            animator.setIntValues(previousValue!!, newValue)
            animator.duration = durationInMillis(previousValue!!, newValue)
            animator.start()
        }
        previousValue = newValue
    }

    awaitClose {
        animator.removeUpdateListener(updateListener)
        animator.cancel()
    }
}.distinctUntilChanged()

@JvmName("animateFloat")
fun Flow<Float>.animate(
    durationInMillis: (previousValue: Float, currentValue: Float) -> Long = { _, _ -> 500 },
    interpolator: Interpolator = LinearInterpolator(),
): Flow<Float> = callbackFlow {
    var previousValue: Float? = null

    val animator = ValueAnimator().apply {
        this.interpolator = interpolator
    }

    val updateListener = ValueAnimator.AnimatorUpdateListener { animation ->
        trySend(animation.animatedValue as Float)
    }
    animator.addUpdateListener(updateListener)

    collect { newValue ->
        if (animator.isRunning) {
            val currentAnimatedValue = animator.animatedValue as Float
            animator.duration = durationInMillis(currentAnimatedValue, newValue)
            animator.setFloatValues(currentAnimatedValue, newValue)
            animator.start()
        }
        else if (previousValue == null) {
            send(newValue)
        }
        else {
            animator.setFloatValues(previousValue!!, newValue)
            animator.duration = durationInMillis(previousValue!!, newValue)
            animator.start()
        }
        previousValue = newValue
    }

    awaitClose {
        animator.removeUpdateListener(updateListener)
        animator.cancel()
    }
}.distinctUntilChanged()

fun Flow<Int>.animateArgbFlow(
    duration: (previousValue: Int, currentValue: Int) -> Long = { _, _ -> 500 },
    interpolator: TimeInterpolator = LinearInterpolator(),
): Flow<Int> = callbackFlow {
    var previousValue: Int? = null

    val animator = ValueAnimator().apply {
        this.interpolator = interpolator
        setEvaluator(ArgbEvaluator())
    }

    val updateListener = ValueAnimator.AnimatorUpdateListener { animation ->
        trySend(animation.animatedValue as Int)
    }
    animator.addUpdateListener(updateListener)

    collect { newValue ->
        if (animator.isRunning) {
            val currentAnimatedValue = animator.animatedValue as Int
            animator.duration = duration(currentAnimatedValue, newValue)
            animator.setIntValues(currentAnimatedValue, newValue)
            animator.start()
        }
        else if (previousValue == null) {
            send(newValue)
        }
        else {
            animator.setIntValues(previousValue!!, newValue)
            animator.duration = duration(previousValue!!, newValue)
            animator.start()
        }
        previousValue = newValue
    }

    awaitClose {
        animator.removeUpdateListener(updateListener)
        animator.cancel()
    }
}.distinctUntilChanged()

@Suppress("UNCHECKED_CAST")
@JvmName("animateAny")
fun <T : Any> Flow<T>.animate(
    evaluator: TypeEvaluator<T>,
    durationInMillis: (previousValue: T, currentValue: T) -> Long = { _, _ -> 500 },
    interpolator: Interpolator = LinearInterpolator(),
): Flow<T> = callbackFlow {
    var previousValue: T? = null

    val animator = ValueAnimator().apply {
        this.interpolator = interpolator
    }

    val updateListener = ValueAnimator.AnimatorUpdateListener { animation ->
        trySend(animation.animatedValue as T)
    }
    animator.addUpdateListener(updateListener)

    collect { newValue ->
        if (animator.isRunning) {
            val currentAnimatedValue = animator.animatedValue as T
            animator.duration = durationInMillis(currentAnimatedValue, newValue)
            animator.setObjectValues(currentAnimatedValue, newValue)
            animator.setEvaluator(evaluator)
            animator.start()
        }
        else if (previousValue == null) {
            send(newValue)
        }
        else {
            animator.setObjectValues(previousValue!!, newValue)
            animator.duration = durationInMillis(previousValue!!, newValue)
            animator.setEvaluator(evaluator)
            animator.start()
        }
        previousValue = newValue
    }

    awaitClose {
        animator.removeUpdateListener(updateListener)
        animator.cancel()
    }
}.distinctUntilChanged()
