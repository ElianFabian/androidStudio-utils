@file:Suppress("NOTHING_TO_INLINE")

import android.os.Parcelable
import androidx.core.os.bundleOf
import androidx.fragment.app.DialogFragment
import androidx.fragment.app.Fragment
import androidx.fragment.app.FragmentActivity
import androidx.fragment.app.FragmentManager

interface TypedDialogFragment<TArgs : Parcelable, TEvent : Parcelable> : TypedFragment<TArgs, TEvent>


inline fun <T, TArgs : Parcelable> T.showDialog(
	fragment: Fragment,
	args: TArgs? = null,
) where T : DialogFragment, T : TypedDialogFragment<TArgs, *> {

	require(fragment != this) {
		"Cannot set event listener on the same dialog fragment instance: ${fragment::class.qualifiedName}."
	}

	showDialog(fragment.childFragmentManager, args)
}

inline fun <T, TArgs : Parcelable> T.showDialog(
	activity: FragmentActivity,
	args: TArgs? = null,
) where T : DialogFragment, T : TypedDialogFragment<TArgs, *> {

	showDialog(activity.supportFragmentManager, args)
}

inline fun <T, TArgs : Parcelable> T.showDialog(
	fragmentManager: FragmentManager,
	args: TArgs? = null,
) where T : DialogFragment, T : TypedDialogFragment<TArgs, *> {

	if (args != null) {
		arguments = bundleOf("args" to args)
	}

	return show(fragmentManager, fragmentId ?: return)
}

inline fun <T, TArgs : Parcelable> T.dismissDialog(
	fragment: Fragment,
) where T : DialogFragment, T : TypedDialogFragment<TArgs, *> {

	kotlin.runCatching {
		val self = fragment.childFragmentManager.findFragmentByTag(fragmentId) as? DialogFragment
		self?.dismiss()
	}
}

inline fun <T, TArgs : Parcelable> T.dismissDialog(
	activity: FragmentActivity,
) where T : DialogFragment, T : TypedDialogFragment<TArgs, *> {

	kotlin.runCatching {
		val self = activity.supportFragmentManager.findFragmentByTag(fragmentId) as? DialogFragment
		self?.dismiss()
	}
}

inline fun <T, TArgs : Parcelable> T.dismissDialog(
	fragmentManager: FragmentManager,
) where T : DialogFragment, T : TypedDialogFragment<TArgs, *> {

	kotlin.runCatching {
		val self = fragmentManager.findFragmentByTag(fragmentId) as? DialogFragment
		self?.dismiss()
	}
}
