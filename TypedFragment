@file:Suppress("NOTHING_TO_INLINE")

import android.os.Parcelable
import androidx.core.os.bundleOf
import androidx.fragment.app.Fragment
import androidx.fragment.app.FragmentActivity
import androidx.fragment.app.FragmentManager
import androidx.fragment.app.clearFragmentResult
import androidx.fragment.app.clearFragmentResultListener
import androidx.fragment.app.setFragmentResult
import androidx.lifecycle.LifecycleOwner

interface TypedFragment<TArgs : Parcelable, TEvent : Parcelable> {

	val fragmentId: String?
}


inline fun <T, TEvent : Parcelable> T.sendFragmentEvent(event: TEvent) where T : Fragment, T : TypedFragment<*, TEvent> {

	setFragmentResult(fragmentId ?: return, bundleOf("event" to event))
}

inline fun <T> T.clearFragmentEvent() where T : Fragment, T : TypedFragment<*, *> {

	clearFragmentResult(fragmentId ?: return)
}

inline fun <T> T.clearFragmentEventListener() where T : Fragment, T : TypedFragment<*, *> {

	clearFragmentResultListener(fragmentId ?: return)
}

fun <T, TArgs : Parcelable> T.getArgs(): TArgs? where T : Fragment, T : TypedFragment<TArgs, *> {

	return arguments?.getParcelable("args")
}

inline fun <T, TEvent : Parcelable> T.setFragmentEventListener(
	fragment: Fragment,
	crossinline onEvent: (event: TEvent) -> Unit,
) where T : Fragment, T : TypedFragment<*, TEvent> {

	require(fragment != this) {
		"Cannot set event listener on the same dialog fragment instance: ${fragment::class.qualifiedName}."
	}

	setFragmentEventListener(fragment.childFragmentManager, fragment.viewLifecycleOwner, onEvent)
}

inline fun <T, TEvent : Parcelable> T.setFragmentEventListener(
	activity: FragmentActivity,
	crossinline onEvent: (event: TEvent) -> Unit,
) where T : Fragment, T : TypedFragment<*, TEvent> {

	setFragmentEventListener(activity.supportFragmentManager, activity, onEvent)
}

inline fun <T, TEvent : Parcelable> T.setFragmentEventListener(
	fragmentManager: FragmentManager,
	lifecycleOwner: LifecycleOwner,
	crossinline onEvent: (event: TEvent) -> Unit,
) where T : Fragment, T : TypedFragment<*, TEvent> {

	fragmentManager.setFragmentResultListener(
		fragmentId ?: return,
		lifecycleOwner,
	) { _, bundle ->
		onEvent(bundle.getParcelable("event") ?: return@setFragmentResultListener)
	}
}
